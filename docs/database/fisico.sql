-- MySQL Script generated by MySQL Workbench
-- Tue Dec  3 01:38:21 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema rotisdb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `rotisdb` ;

-- -----------------------------------------------------
-- Schema rotisdb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `rotisdb` DEFAULT CHARACTER SET utf8mb4 ;
USE `rotisdb` ;

-- -----------------------------------------------------
-- Table `rotisdb`.`tb_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_status` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_status` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(50) NULL DEFAULT NULL,
  `status_activated` TINYINT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_clientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_clientes` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_clientes` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(255) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `telefone` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 19
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_agendamentos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_agendamentos` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_agendamentos` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `data_agendamento` DATE NOT NULL,
  `receita_id` INT(11) NOT NULL,
  `cliente_id` INT(11) NOT NULL,
  `status_id` INT(11) NOT NULL,
  `observacoes` TEXT NULL DEFAULT NULL,
  `data_retirada` DATE NULL DEFAULT NULL,
  `quantidade_receita` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `status_id` (`status_id` ASC) VISIBLE,
  INDEX `cliente_id` (`cliente_id` ASC) VISIBLE,
  CONSTRAINT `tb_agendamentos_ibfk_1`
    FOREIGN KEY (`status_id`)
    REFERENCES `rotisdb`.`tb_status` (`id`),
  CONSTRAINT `tb_agendamentos_ibfk_2`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `rotisdb`.`tb_clientes` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 89
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_categorias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_categorias` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_categorias` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 8
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_endereco`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_endereco` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_endereco` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `rua` VARCHAR(255) NOT NULL,
  `numero` VARCHAR(10) NOT NULL,
  `bairro` VARCHAR(100) NOT NULL,
  `cidade` VARCHAR(100) NOT NULL,
  `estado` VARCHAR(2) NOT NULL,
  `cep` VARCHAR(10) NOT NULL,
  `cliente_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `cliente_id` (`cliente_id` ASC) VISIBLE,
  CONSTRAINT `tb_endereco_ibfk_1`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `rotisdb`.`tb_clientes` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 9
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_tipoitem`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_tipoitem` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_tipoitem` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `tipo` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_estoque`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_estoque` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_estoque` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(255) NOT NULL,
  `quantidade` INT(11) NOT NULL,
  `preco_unitario` DECIMAL(10,2) NULL DEFAULT NULL,
  `preco_venda` DECIMAL(10,2) NULL DEFAULT NULL,
  `tipo_id` INT(11) NOT NULL,
  `categoria_id` INT(11) NOT NULL,
  `ativado` TINYINT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `categoria_id` (`categoria_id` ASC) VISIBLE,
  INDEX `tipo_id` (`tipo_id` ASC) VISIBLE,
  CONSTRAINT `tb_estoque_ibfk_1`
    FOREIGN KEY (`categoria_id`)
    REFERENCES `rotisdb`.`tb_categorias` (`id`),
  CONSTRAINT `tb_estoque_ibfk_2`
    FOREIGN KEY (`tipo_id`)
    REFERENCES `rotisdb`.`tb_tipoitem` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 36
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_funcoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_funcoes` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_funcoes` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_logs_login`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_logs_login` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_logs_login` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(255) NOT NULL,
  `data_horario_acesso` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 30
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_preco_venda`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_preco_venda` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_preco_venda` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `id_estoque` INT(11) NOT NULL,
  `preco_venda` DECIMAL(10,2) NOT NULL,
  `data_atualizacao` DATETIME NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 51
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_precos_compra`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_precos_compra` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_precos_compra` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `estoque_id` INT(11) NOT NULL,
  `preco_unitario` DECIMAL(10,2) NOT NULL,
  `data_atualizacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`id`),
  INDEX `estoque_id` (`estoque_id` ASC) VISIBLE,
  CONSTRAINT `tb_precos_compra_ibfk_1`
    FOREIGN KEY (`estoque_id`)
    REFERENCES `rotisdb`.`tb_estoque` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 52
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_receitas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_receitas` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_receitas` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `produto_final_id` INT(11) NOT NULL,
  `ingrediente_id` INT(11) NOT NULL,
  `quantidade_necessaria` DECIMAL(10,2) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `produto_final_id` (`produto_final_id` ASC) VISIBLE,
  INDEX `ingrediente_id` (`ingrediente_id` ASC) VISIBLE,
  CONSTRAINT `tb_receitas_ibfk_1`
    FOREIGN KEY (`produto_final_id`)
    REFERENCES `rotisdb`.`tb_estoque` (`id`),
  CONSTRAINT `tb_receitas_ibfk_2`
    FOREIGN KEY (`ingrediente_id`)
    REFERENCES `rotisdb`.`tb_estoque` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 9
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `rotisdb`.`tb_usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rotisdb`.`tb_usuarios` ;

CREATE TABLE IF NOT EXISTS `rotisdb`.`tb_usuarios` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(255) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `senha` VARCHAR(255) NOT NULL,
  `funcao_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uc_email` (`email` ASC) VISIBLE,
  INDEX `funcao_id` (`funcao_id` ASC) VISIBLE,
  CONSTRAINT `tb_usuarios_ibfk_1`
    FOREIGN KEY (`funcao_id`)
    REFERENCES `rotisdb`.`tb_funcoes` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 22
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;

USE `rotisdb` ;

-- -----------------------------------------------------
-- procedure SP_Registra_Acesso
-- -----------------------------------------------------

USE `rotisdb`;
DROP procedure IF EXISTS `rotisdb`.`SP_Registra_Acesso`;

DELIMITER $$
USE `rotisdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Registra_Acesso`(IN email VARCHAR(255))
BEGIN
	INSERT INTO tb_logs_login (email, data_horario_acesso)
    VALUES (email, NOW());
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_Registra_Alteracao_Preco_Custo
-- -----------------------------------------------------

USE `rotisdb`;
DROP procedure IF EXISTS `rotisdb`.`SP_Registra_Alteracao_Preco_Custo`;

DELIMITER $$
USE `rotisdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Registra_Alteracao_Preco_Custo`(IN id_estoque INT,IN preco_antigo DECIMAL(10,2))
BEGIN
    INSERT INTO tb_precos_compra (estoque_id, preco_unitario, data_atualizacao) 
    VALUES (id_estoque, preco_antigo, NOW());
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_Registra_Preco_Venda
-- -----------------------------------------------------

USE `rotisdb`;
DROP procedure IF EXISTS `rotisdb`.`SP_Registra_Preco_Venda`;

DELIMITER $$
USE `rotisdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Registra_Preco_Venda`(IN id_estoque INT, IN preco_venda DECIMAL(10,2))
BEGIN
	INSERT INTO tb_preco_venda (id_estoque, preco_venda, data_atualizacao)
    VALUES (id_estoque, preco_venda, NOW());
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `rotisdb`;

DELIMITER $$

USE `rotisdb`$$
DROP TRIGGER IF EXISTS `rotisdb`.`TRG_Registra_Preco_Unitario` $$
USE `rotisdb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `rotisdb`.`TRG_Registra_Preco_Unitario`
BEFORE UPDATE ON `rotisdb`.`tb_estoque`
FOR EACH ROW
BEGIN
	IF OLD.preco_unitario <> NEW.preco_unitario THEN
    	CALL SP_Registra_Alteracao_Preco_Custo(OLD.id, OLD.preco_unitario);
    END IF;
END$$


USE `rotisdb`$$
DROP TRIGGER IF EXISTS `rotisdb`.`TRG_Registra_Preco_Venda` $$
USE `rotisdb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `rotisdb`.`TRG_Registra_Preco_Venda`
BEFORE UPDATE ON `rotisdb`.`tb_estoque`
FOR EACH ROW
BEGIN
	IF OLD.preco_venda <> NEW.preco_venda THEN
    	CALL SP_Registra_Preco_Venda(OLD.id, OLD.preco_venda);
    END IF;
END$$


USE `rotisdb`$$
DROP TRIGGER IF EXISTS `rotisdb`.`before_update_estoque` $$
USE `rotisdb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `rotisdb`.`before_update_estoque`
BEFORE UPDATE ON `rotisdb`.`tb_estoque`
FOR EACH ROW
BEGIN
    -- Evitar alteração do campo 'ativado' quando outros campos estão sendo atualizados
    IF OLD.preco_unitario = NEW.preco_unitario AND OLD.preco_venda = NEW.preco_venda THEN
        -- Verificar se o item de estoque está relacionado a agendamentos ativos
        IF EXISTS (
            SELECT 1
            FROM tb_agendamentos AS a
            JOIN tb_receitas AS r ON a.receita_id = r.id
            WHERE (r.produto_final_id = OLD.id OR r.ingrediente_id = OLD.id)
              AND a.status_id IN (SELECT id FROM tb_status WHERE descricao IN ('Em Andamento', 'Finalizado'))
        ) THEN
            -- Atualizar o atributo ativado para 0 (desativado) em vez de excluir
            SET NEW.ativado = 0;

            -- Definir uma mensagem de erro para o controle da aplicação
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Nao foi possivel desativar. Possivelmente existem agendamentos com este item de estoque.';
        END IF;
    END IF;
END$$


DELIMITER ;
